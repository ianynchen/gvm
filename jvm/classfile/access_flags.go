package classfile

import (
	"fmt"
	"io"
)

const (
	CLASS_ACC_PUBLIC     uint16 = 0x0001 //Declared public; may be accessed from outside its package.
	CLASS_ACC_FINAL      uint16 = 0x0010 //Declared final; no subclasses allowed.
	CLASS_ACC_SUPER      uint16 = 0x0020 //Treat superclass methods specially when invoked by the invokespecial instruction.
	CLASS_ACC_INTERFACE  uint16 = 0x0200 //Is an interface, not a class.
	CLASS_ACC_ABSTRACT   uint16 = 0x0400 //Declared abstract; must not be instantiated.
	CLASS_ACC_SYNTHETIC  uint16 = 0x1000 //Declared synthetic; not present in the source code.
	CLASS_ACC_ANNOTATION uint16 = 0x2000 //Declared as an annotation type.
	CLASS_ACC_ENUM       uint16 = 0x4000 //Declared as an enum type.
)

const (
	FIELD_ACC_PUBLIC    uint16 = 0x0001 //Declared public; may be accessed from outside its package.
	FIELD_ACC_PRIVATE   uint16 = 0x0002 //Declared private; usable only within the defining class.
	FIELD_ACC_PROTECTED uint16 = 0x0004 //Declared protected; may be accessed within subclasses.
	FIELD_ACC_STATIC    uint16 = 0x0008 //Declared static.
	FIELD_ACC_FINAL     uint16 = 0x0010 //Declared final; never directly assigned to after object construction (JLS ยง17.5).
	FIELD_ACC_VOLATILE  uint16 = 0x0040 //Declared volatile; cannot be cached.
	FIELD_ACC_TRANSIENT uint16 = 0x0080 //Declared transient; not written or read by a persistent object manager.
	FIELD_ACC_SYNTHETIC uint16 = 0x1000 //Declared synthetic; not present in the source code.
	FIELD_ACC_ENUM      uint16 = 0x4000 //Declared as an element of an enum.
)

const (
	METHOD_ACC_PUBLIC       uint16 = 0x0001 //Declared public; may be accessed from outside its package.
	METHOD_ACC_PRIVATE      uint16 = 0x0002 //Declared private; accessible only within the defining class.
	METHOD_ACC_PROTECTED    uint16 = 0x0004 //Declared protected; may be accessed within subclasses.
	METHOD_ACC_STATIC       uint16 = 0x0008 //Declared static.
	METHOD_ACC_FINAL        uint16 = 0x0010 //Declared final; must not be overridden (ยง5.4.5).
	METHOD_ACC_SYNCHRONIZED uint16 = 0x0020 //Declared synchronized; invocation is wrapped by a monitor use.
	METHOD_ACC_BRIDGE       uint16 = 0x0040 //A bridge method, generated by the compiler.
	METHOD_ACC_VARARGS      uint16 = 0x0080 //Declared with variable number of arguments.
	METHOD_ACC_NATIVE       uint16 = 0x0100 //Declared native; implemented in a language other than Java.
	METHOD_ACC_ABSTRACT     uint16 = 0x0400 //Declared abstract; no implementation is provided.
	METHOD_ACC_STRICT       uint16 = 0x0800 //Declared strictfp; floating-point mode is FPstrict.
	METHOD_ACC_SYNTHETIC    uint16 = 0x1000 //Declared synthetic; not present in the source code.
)

func isInterface(flag uint16) bool {
	return flag&CLASS_ACC_INTERFACE != uint16(0)
}

func isPublic(flag uint16) bool {
	return flag&CLASS_ACC_PUBLIC != uint16(0)
}

func isFinal(flag uint16) bool {
	return flag&CLASS_ACC_FINAL != uint16(0)
}

func isSuper(flag uint16) bool {
	return flag&CLASS_ACC_SUPER != uint16(0)
}

func isAbstract(flag uint16) bool {
	return flag&CLASS_ACC_ABSTRACT != uint16(0)
}

func isSynthetic(flag uint16) bool {
	return flag&CLASS_ACC_SYNTHETIC != uint16(0)
}

func isAnnotation(flag uint16) bool {
	return flag&CLASS_ACC_ANNOTATION != uint16(0)
}

func isEnum(flag uint16) bool {
	return flag&CLASS_ACC_ENUM != uint16(0)
}

func (class Class) IsInterface() bool {
	return isInterface(class.AccessFlags)
}

func (class Class) IsPublic() bool {
	return isPublic(class.AccessFlags)
}

func (class Class) IsFinal() bool {
	return isFinal(class.AccessFlags)
}

func (class Class) IsSuper() bool {
	return isSuper(class.AccessFlags)
}

func (class Class) IsAbstract() bool {
	return isAbstract(class.AccessFlags)
}

func (class Class) IsSynthetic() bool {
	return isSynthetic(class.AccessFlags)
}

func (class Class) IsAnnotation() bool {
	return isAnnotation(class.AccessFlags)
}

func (class Class) IsEnum() bool {
	return isEnum(class.AccessFlags)
}

func (class Class) isAccessFlagValid() bool {
	if class.IsInterface() {
		return class.IsAbstract() &&
			!class.IsFinal() &&
			!class.IsSuper() &&
			!class.IsEnum()
	}
	if !class.IsAnnotation() {
		return class.IsFinal() && class.IsAbstract()
	}
	return false
}

func (class Class) printAccessFlag(writer io.Writer) {
	fmt.Fprintln(writer, fmt.Sprintf("Access flags: interface %v, public %v, final: %v, super: %v, abstract: %v, synthetic: %v, annotation: %v, enum: %v",
		class.IsInterface(), class.IsPublic(), class.IsFinal(), class.IsSuper(),
		class.IsAbstract(), class.IsSynthetic(), class.IsAnnotation(), class.IsEnum()))
}
